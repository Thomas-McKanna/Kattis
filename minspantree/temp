#include <vector>

using namespace std;

typedef vector<int> vi;
typedef pair<double, double> dd;
typedef pair<int, int> ii;
typedef pair<double, ii> dii;

class UnionFind {
private: 
    vector<int> p, rank;
    int n;
public:
    UnionFind(int N) {
        n = N;
        rank.assign(N, 0);
        p.assign(N, 0);
        for (int i = 0; i < N; i++) 
            p[i] = i;
    }
    int findSet(int i) { 
        return (p[i] == i) ? i : (p[i] = findSet(p[i])); 
    }
    bool isSameSet(int i, int j) { 
        return findSet(i) == findSet(j); 
    }
    void unionSet(int i, int j) {
        if (!isSameSet(i, j)) {
            n--;
            int x = findSet(i), y = findSet(j);
            if (rank[x] > rank[y]) p[y] = x;
            else {
                p[x] = y;
                if (rank[x] == rank[y])
                    rank[y]++;
            }   
        } 
    }
};